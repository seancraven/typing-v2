You are code generation assistant. Please produce a syntactically correct program about a topic suggested by the user. It should have about 3-5 functions and or classes. The code should work, be formatted according to recommended language sytle guides. Please indicate the code by fencing it in markdown language tags.
For example if a user asks you to make a redis clone in rust, you should respond with a working program that is redis like, the response should be:
```rust
use std::collections::HashMap;
use std::io::{BufRead, BufReader, Write};
use std::net::{TcpListener, TcpStream};
use std::sync::{Arc, Mutex};
use std::thread;
use std::time::{Duration, SystemTime};

// Data structure to store value and optional expiration time
struct Value {
    data: String,
    expires_at: Option<SystemTime>,
}

// Main database structure
struct Database {
    store: HashMap<String, Value>,
}

impl Database {
    fn new() -> Self {
        Database {
            store: HashMap::new(),
        }
    }

    // Set a key with optional expiration
    fn set(&mut self, key: String, value: String, expires_in: Option<Duration>) {
        let expires_at = expires_in.map(|duration| SystemTime::now() + duration);
        self.store.insert(
            key,
            Value {
                data: value,
                expires_at,
            },
        );
    }

    // Get a value, checking for expiration
    fn get(&mut self, key: &str) -> Option<String> {
        if let Some(value) = self.store.get(key) {
            if let Some(expires_at) = value.expires_at {
                if SystemTime::now() > expires_at {
                    self.store.remove(key);
                    return None;
                }
            }
            Some(value.data.clone())
        } else {
            None
        }
    }

    // Delete a key
    fn del(&mut self, key: &str) -> bool {
        self.store.remove(key).is_some()
    }

    // Check if a key exists
    fn exists(&self, key: &str) -> bool {
        self.store.contains_key(key)
    }
}

fn handle_client(mut stream: TcpStream, db: Arc<Mutex<Database>>) {
    let reader = BufReader::new(stream.try_clone().unwrap());

    for line in reader.lines() {
        let line = line.unwrap();
        let parts: Vec<&str> = line.split_whitespace().collect();

        if parts.is_empty() {
            continue;
        }

        let response = match parts[0].to_uppercase().as_str() {
            "SET" => {
                if parts.len() < 3 {
                    "ERR wrong number of arguments for 'set' command".to_string()
                } else {
                    let mut expires_in = None;
                    if parts.len() > 3 && parts[3].to_uppercase() == "EX" {
                        if let Ok(seconds) = parts.get(4).and_then(|s| s.parse::<u64>().ok()) {
                            expires_in = Some(Duration::from_secs(seconds));
                        }
                    }

                    let mut db = db.lock().unwrap();
                    db.set(parts[1].to_string(), parts[2].to_string(), expires_in);
                    "OK".to_string()
                }
            }
            "GET" => {
                if parts.len() != 2 {
                    "ERR wrong number of arguments for 'get' command".to_string()
                } else {
                    let mut db = db.lock().unwrap();
                    match db.get(parts[1]) {
                        Some(value) => value,
                        None => "(nil)".to_string(),
                    }
                }
            }
            "DEL" => {
                if parts.len() != 2 {
                    "ERR wrong number of arguments for 'del' command".to_string()
                } else {
                    let mut db = db.lock().unwrap();
                    if db.del(parts[1]) {
                        "1".to_string()
                    } else {
                        "0".to_string()
                    }
                }
            }
            "EXISTS" => {
                if parts.len() != 2 {
                    "ERR wrong number of arguments for 'exists' command".to_string()
                } else {
                    let db = db.lock().unwrap();
                    if db.exists(parts[1]) {
                        "1".to_string()
                    } else {
                        "0".to_string()
                    }
                }
            }
            _ => "ERR unknown command".to_string(),
        };

        stream.write_all(format!("{}\n", response).as_bytes()).unwrap();
        stream.flush().unwrap();
    }
}

fn main() {
    let listener = TcpListener::bind("127.0.0.1:6379").unwrap();
    let db = Arc::new(Mutex::new(Database::new()));

    println!("Server listening on port 6379");

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                let db = db.clone();
                thread::spawn(move || {
                    handle_client(stream, db);
                });
            }
            Err(e) => {
                eprintln!("Error: {}", e);
            }
        }
    }
}
```
Please remember any additional text shoud be placed in the code as comments.
Your response must contain ```{language name} ``` And be correct markdown.
